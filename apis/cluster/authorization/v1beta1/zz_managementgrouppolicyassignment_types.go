// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type ManagementGroupPolicyAssignmentIdentityInitParameters struct {

	// A list of User Managed Identity IDs which should be assigned to the Policy Definition.
	// +listType=set
	IdentityIds []*string `json:"identityIds,omitempty" tf:"identity_ids,omitempty"`

	// The Type of Managed Identity which should be added to this Policy Definition. Possible values are SystemAssigned and UserAssigned.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ManagementGroupPolicyAssignmentIdentityObservation struct {

	// A list of User Managed Identity IDs which should be assigned to the Policy Definition.
	// +listType=set
	IdentityIds []*string `json:"identityIds,omitempty" tf:"identity_ids,omitempty"`

	// The Principal ID of the Policy Assignment for this Management Group.
	PrincipalID *string `json:"principalId,omitempty" tf:"principal_id,omitempty"`

	// The Tenant ID of the Policy Assignment for this Management Group.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// The Type of Managed Identity which should be added to this Policy Definition. Possible values are SystemAssigned and UserAssigned.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ManagementGroupPolicyAssignmentIdentityParameters struct {

	// A list of User Managed Identity IDs which should be assigned to the Policy Definition.
	// +kubebuilder:validation:Optional
	// +listType=set
	IdentityIds []*string `json:"identityIds,omitempty" tf:"identity_ids,omitempty"`

	// The Type of Managed Identity which should be added to this Policy Definition. Possible values are SystemAssigned and UserAssigned.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type ManagementGroupPolicyAssignmentInitParameters struct {

	// A description which should be used for this Policy Assignment.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The Display Name for this Policy Assignment.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Specifies if this Policy should be enforced or not? Defaults to true.
	Enforce *bool `json:"enforce,omitempty" tf:"enforce,omitempty"`

	// An identity block as defined below.
	Identity *ManagementGroupPolicyAssignmentIdentityInitParameters `json:"identity,omitempty" tf:"identity,omitempty"`

	// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// A JSON mapping of any Metadata for this Policy.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// One or more non_compliance_message blocks as defined below.
	NonComplianceMessage []ManagementGroupPolicyAssignmentNonComplianceMessageInitParameters `json:"nonComplianceMessage,omitempty" tf:"non_compliance_message,omitempty"`

	// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
	NotScopes []*string `json:"notScopes,omitempty" tf:"not_scopes,omitempty"`

	// One or more overrides blocks as defined below. More detail about overrides and resource_selectors see policy assignment structure
	Overrides []ManagementGroupPolicyAssignmentOverridesInitParameters `json:"overrides,omitempty" tf:"overrides,omitempty"`

	// A JSON mapping of any Parameters for this Policy.
	Parameters *string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cluster/authorization/v1beta1.PolicyDefinition
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	PolicyDefinitionID *string `json:"policyDefinitionId,omitempty" tf:"policy_definition_id,omitempty"`

	// Reference to a PolicyDefinition in authorization to populate policyDefinitionId.
	// +kubebuilder:validation:Optional
	PolicyDefinitionIDRef *v1.Reference `json:"policyDefinitionIdRef,omitempty" tf:"-"`

	// Selector for a PolicyDefinition in authorization to populate policyDefinitionId.
	// +kubebuilder:validation:Optional
	PolicyDefinitionIDSelector *v1.Selector `json:"policyDefinitionIdSelector,omitempty" tf:"-"`

	// One or more resource_selectors blocks as defined below to filter polices by resource properties.
	ResourceSelectors []ManagementGroupPolicyAssignmentResourceSelectorsInitParameters `json:"resourceSelectors,omitempty" tf:"resource_selectors,omitempty"`
}

type ManagementGroupPolicyAssignmentNonComplianceMessageInitParameters struct {

	// The non-compliance message text. When assigning policy sets (initiatives), unless policy_definition_reference_id is specified then this message will be the default for all policies.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// When assigning policy sets (initiatives), this is the ID of the policy definition that the non-compliance message applies to.
	PolicyDefinitionReferenceID *string `json:"policyDefinitionReferenceId,omitempty" tf:"policy_definition_reference_id,omitempty"`
}

type ManagementGroupPolicyAssignmentNonComplianceMessageObservation struct {

	// The non-compliance message text. When assigning policy sets (initiatives), unless policy_definition_reference_id is specified then this message will be the default for all policies.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// When assigning policy sets (initiatives), this is the ID of the policy definition that the non-compliance message applies to.
	PolicyDefinitionReferenceID *string `json:"policyDefinitionReferenceId,omitempty" tf:"policy_definition_reference_id,omitempty"`
}

type ManagementGroupPolicyAssignmentNonComplianceMessageParameters struct {

	// The non-compliance message text. When assigning policy sets (initiatives), unless policy_definition_reference_id is specified then this message will be the default for all policies.
	// +kubebuilder:validation:Optional
	Content *string `json:"content" tf:"content,omitempty"`

	// When assigning policy sets (initiatives), this is the ID of the policy definition that the non-compliance message applies to.
	// +kubebuilder:validation:Optional
	PolicyDefinitionReferenceID *string `json:"policyDefinitionReferenceId,omitempty" tf:"policy_definition_reference_id,omitempty"`
}

type ManagementGroupPolicyAssignmentObservation struct {

	// A description which should be used for this Policy Assignment.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The Display Name for this Policy Assignment.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Specifies if this Policy should be enforced or not? Defaults to true.
	Enforce *bool `json:"enforce,omitempty" tf:"enforce,omitempty"`

	// The ID of the Management Group Policy Assignment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// An identity block as defined below.
	Identity *ManagementGroupPolicyAssignmentIdentityObservation `json:"identity,omitempty" tf:"identity,omitempty"`

	// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The ID of the Management Group. Changing this forces a new Policy Assignment to be created.
	ManagementGroupID *string `json:"managementGroupId,omitempty" tf:"management_group_id,omitempty"`

	// A JSON mapping of any Metadata for this Policy.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// One or more non_compliance_message blocks as defined below.
	NonComplianceMessage []ManagementGroupPolicyAssignmentNonComplianceMessageObservation `json:"nonComplianceMessage,omitempty" tf:"non_compliance_message,omitempty"`

	// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
	NotScopes []*string `json:"notScopes,omitempty" tf:"not_scopes,omitempty"`

	// One or more overrides blocks as defined below. More detail about overrides and resource_selectors see policy assignment structure
	Overrides []ManagementGroupPolicyAssignmentOverridesObservation `json:"overrides,omitempty" tf:"overrides,omitempty"`

	// A JSON mapping of any Parameters for this Policy.
	Parameters *string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
	PolicyDefinitionID *string `json:"policyDefinitionId,omitempty" tf:"policy_definition_id,omitempty"`

	// One or more resource_selectors blocks as defined below to filter polices by resource properties.
	ResourceSelectors []ManagementGroupPolicyAssignmentResourceSelectorsObservation `json:"resourceSelectors,omitempty" tf:"resource_selectors,omitempty"`
}

type ManagementGroupPolicyAssignmentOverridesInitParameters struct {

	// One or more override_selector block as defined below.
	Selectors []ManagementGroupPolicyAssignmentOverridesSelectorsInitParameters `json:"selectors,omitempty" tf:"selectors,omitempty"`

	// Specifies the value to override the policy property. Possible values for policyEffect override listed policy effects.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ManagementGroupPolicyAssignmentOverridesObservation struct {

	// One or more override_selector block as defined below.
	Selectors []ManagementGroupPolicyAssignmentOverridesSelectorsObservation `json:"selectors,omitempty" tf:"selectors,omitempty"`

	// Specifies the value to override the policy property. Possible values for policyEffect override listed policy effects.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ManagementGroupPolicyAssignmentOverridesParameters struct {

	// One or more override_selector block as defined below.
	// +kubebuilder:validation:Optional
	Selectors []ManagementGroupPolicyAssignmentOverridesSelectorsParameters `json:"selectors,omitempty" tf:"selectors,omitempty"`

	// Specifies the value to override the policy property. Possible values for policyEffect override listed policy effects.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type ManagementGroupPolicyAssignmentOverridesSelectorsInitParameters struct {

	// The list of allowed values for the specified kind. Cannot be used with not_in. Can contain up to 50 values.
	In []*string `json:"in,omitempty" tf:"in,omitempty"`

	// The list of not-allowed values for the specified kind. Cannot be used with in. Can contain up to 50 values.
	NotIn []*string `json:"notIn,omitempty" tf:"not_in,omitempty"`
}

type ManagementGroupPolicyAssignmentOverridesSelectorsObservation struct {

	// The list of allowed values for the specified kind. Cannot be used with not_in. Can contain up to 50 values.
	In []*string `json:"in,omitempty" tf:"in,omitempty"`

	// Specifies which characteristic will narrow down the set of evaluated resources. Possible values are resourceLocation, resourceType and resourceWithoutLocation.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// The list of not-allowed values for the specified kind. Cannot be used with in. Can contain up to 50 values.
	NotIn []*string `json:"notIn,omitempty" tf:"not_in,omitempty"`
}

type ManagementGroupPolicyAssignmentOverridesSelectorsParameters struct {

	// The list of allowed values for the specified kind. Cannot be used with not_in. Can contain up to 50 values.
	// +kubebuilder:validation:Optional
	In []*string `json:"in,omitempty" tf:"in,omitempty"`

	// The list of not-allowed values for the specified kind. Cannot be used with in. Can contain up to 50 values.
	// +kubebuilder:validation:Optional
	NotIn []*string `json:"notIn,omitempty" tf:"not_in,omitempty"`
}

type ManagementGroupPolicyAssignmentParameters struct {

	// A description which should be used for this Policy Assignment.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The Display Name for this Policy Assignment.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Specifies if this Policy should be enforced or not? Defaults to true.
	// +kubebuilder:validation:Optional
	Enforce *bool `json:"enforce,omitempty" tf:"enforce,omitempty"`

	// An identity block as defined below.
	// +kubebuilder:validation:Optional
	Identity *ManagementGroupPolicyAssignmentIdentityParameters `json:"identity,omitempty" tf:"identity,omitempty"`

	// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The ID of the Management Group. Changing this forces a new Policy Assignment to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cluster/management/v1beta1.ManagementGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ManagementGroupID *string `json:"managementGroupId,omitempty" tf:"management_group_id,omitempty"`

	// Reference to a ManagementGroup in management to populate managementGroupId.
	// +kubebuilder:validation:Optional
	ManagementGroupIDRef *v1.Reference `json:"managementGroupIdRef,omitempty" tf:"-"`

	// Selector for a ManagementGroup in management to populate managementGroupId.
	// +kubebuilder:validation:Optional
	ManagementGroupIDSelector *v1.Selector `json:"managementGroupIdSelector,omitempty" tf:"-"`

	// A JSON mapping of any Metadata for this Policy.
	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// One or more non_compliance_message blocks as defined below.
	// +kubebuilder:validation:Optional
	NonComplianceMessage []ManagementGroupPolicyAssignmentNonComplianceMessageParameters `json:"nonComplianceMessage,omitempty" tf:"non_compliance_message,omitempty"`

	// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
	// +kubebuilder:validation:Optional
	NotScopes []*string `json:"notScopes,omitempty" tf:"not_scopes,omitempty"`

	// One or more overrides blocks as defined below. More detail about overrides and resource_selectors see policy assignment structure
	// +kubebuilder:validation:Optional
	Overrides []ManagementGroupPolicyAssignmentOverridesParameters `json:"overrides,omitempty" tf:"overrides,omitempty"`

	// A JSON mapping of any Parameters for this Policy.
	// +kubebuilder:validation:Optional
	Parameters *string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cluster/authorization/v1beta1.PolicyDefinition
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	PolicyDefinitionID *string `json:"policyDefinitionId,omitempty" tf:"policy_definition_id,omitempty"`

	// Reference to a PolicyDefinition in authorization to populate policyDefinitionId.
	// +kubebuilder:validation:Optional
	PolicyDefinitionIDRef *v1.Reference `json:"policyDefinitionIdRef,omitempty" tf:"-"`

	// Selector for a PolicyDefinition in authorization to populate policyDefinitionId.
	// +kubebuilder:validation:Optional
	PolicyDefinitionIDSelector *v1.Selector `json:"policyDefinitionIdSelector,omitempty" tf:"-"`

	// One or more resource_selectors blocks as defined below to filter polices by resource properties.
	// +kubebuilder:validation:Optional
	ResourceSelectors []ManagementGroupPolicyAssignmentResourceSelectorsParameters `json:"resourceSelectors,omitempty" tf:"resource_selectors,omitempty"`
}

type ManagementGroupPolicyAssignmentResourceSelectorsInitParameters struct {

	// Specifies a name for the resource selector.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// One or more resource_selector block as defined below.
	Selectors []ManagementGroupPolicyAssignmentResourceSelectorsSelectorsInitParameters `json:"selectors,omitempty" tf:"selectors,omitempty"`
}

type ManagementGroupPolicyAssignmentResourceSelectorsObservation struct {

	// Specifies a name for the resource selector.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// One or more resource_selector block as defined below.
	Selectors []ManagementGroupPolicyAssignmentResourceSelectorsSelectorsObservation `json:"selectors,omitempty" tf:"selectors,omitempty"`
}

type ManagementGroupPolicyAssignmentResourceSelectorsParameters struct {

	// Specifies a name for the resource selector.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// One or more resource_selector block as defined below.
	// +kubebuilder:validation:Optional
	Selectors []ManagementGroupPolicyAssignmentResourceSelectorsSelectorsParameters `json:"selectors" tf:"selectors,omitempty"`
}

type ManagementGroupPolicyAssignmentResourceSelectorsSelectorsInitParameters struct {

	// The list of allowed values for the specified kind. Cannot be used with not_in. Can contain up to 50 values.
	In []*string `json:"in,omitempty" tf:"in,omitempty"`

	// Specifies which characteristic will narrow down the set of evaluated resources. Possible values are resourceLocation, resourceType and resourceWithoutLocation.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// The list of not-allowed values for the specified kind. Cannot be used with in. Can contain up to 50 values.
	NotIn []*string `json:"notIn,omitempty" tf:"not_in,omitempty"`
}

type ManagementGroupPolicyAssignmentResourceSelectorsSelectorsObservation struct {

	// The list of allowed values for the specified kind. Cannot be used with not_in. Can contain up to 50 values.
	In []*string `json:"in,omitempty" tf:"in,omitempty"`

	// Specifies which characteristic will narrow down the set of evaluated resources. Possible values are resourceLocation, resourceType and resourceWithoutLocation.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// The list of not-allowed values for the specified kind. Cannot be used with in. Can contain up to 50 values.
	NotIn []*string `json:"notIn,omitempty" tf:"not_in,omitempty"`
}

type ManagementGroupPolicyAssignmentResourceSelectorsSelectorsParameters struct {

	// The list of allowed values for the specified kind. Cannot be used with not_in. Can contain up to 50 values.
	// +kubebuilder:validation:Optional
	In []*string `json:"in,omitempty" tf:"in,omitempty"`

	// Specifies which characteristic will narrow down the set of evaluated resources. Possible values are resourceLocation, resourceType and resourceWithoutLocation.
	// +kubebuilder:validation:Optional
	Kind *string `json:"kind" tf:"kind,omitempty"`

	// The list of not-allowed values for the specified kind. Cannot be used with in. Can contain up to 50 values.
	// +kubebuilder:validation:Optional
	NotIn []*string `json:"notIn,omitempty" tf:"not_in,omitempty"`
}

// ManagementGroupPolicyAssignmentSpec defines the desired state of ManagementGroupPolicyAssignment
type ManagementGroupPolicyAssignmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagementGroupPolicyAssignmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ManagementGroupPolicyAssignmentInitParameters `json:"initProvider,omitempty"`
}

// ManagementGroupPolicyAssignmentStatus defines the observed state of ManagementGroupPolicyAssignment.
type ManagementGroupPolicyAssignmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagementGroupPolicyAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ManagementGroupPolicyAssignment is the Schema for the ManagementGroupPolicyAssignments API. Manages a Policy Assignment to a Management Group.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ManagementGroupPolicyAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagementGroupPolicyAssignmentSpec   `json:"spec"`
	Status            ManagementGroupPolicyAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementGroupPolicyAssignmentList contains a list of ManagementGroupPolicyAssignments
type ManagementGroupPolicyAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagementGroupPolicyAssignment `json:"items"`
}

// Repository type metadata.
var (
	ManagementGroupPolicyAssignment_Kind             = "ManagementGroupPolicyAssignment"
	ManagementGroupPolicyAssignment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagementGroupPolicyAssignment_Kind}.String()
	ManagementGroupPolicyAssignment_KindAPIVersion   = ManagementGroupPolicyAssignment_Kind + "." + CRDGroupVersion.String()
	ManagementGroupPolicyAssignment_GroupVersionKind = CRDGroupVersion.WithKind(ManagementGroupPolicyAssignment_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagementGroupPolicyAssignment{}, &ManagementGroupPolicyAssignmentList{})
}
