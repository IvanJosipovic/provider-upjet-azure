// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ResourceGroupPolicyExemptionInitParameters struct {

	// A description to use for this Policy Exemption.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A friendly display name to use for this Policy Exemption.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The category of this policy exemption. Possible values are Waiver and Mitigated.
	ExemptionCategory *string `json:"exemptionCategory,omitempty" tf:"exemption_category,omitempty"`

	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	ExpiresOn *string `json:"expiresOn,omitempty" tf:"expires_on,omitempty"`

	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cluster/authorization/v1beta2.ResourceGroupPolicyAssignment
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	PolicyAssignmentID *string `json:"policyAssignmentId,omitempty" tf:"policy_assignment_id,omitempty"`

	// Reference to a ResourceGroupPolicyAssignment in authorization to populate policyAssignmentId.
	// +kubebuilder:validation:Optional
	PolicyAssignmentIDRef *v1.Reference `json:"policyAssignmentIdRef,omitempty" tf:"-"`

	// Selector for a ResourceGroupPolicyAssignment in authorization to populate policyAssignmentId.
	// +kubebuilder:validation:Optional
	PolicyAssignmentIDSelector *v1.Selector `json:"policyAssignmentIdSelector,omitempty" tf:"-"`

	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds []*string `json:"policyDefinitionReferenceIds,omitempty" tf:"policy_definition_reference_ids,omitempty"`
}

type ResourceGroupPolicyExemptionObservation struct {

	// A description to use for this Policy Exemption.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A friendly display name to use for this Policy Exemption.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The category of this policy exemption. Possible values are Waiver and Mitigated.
	ExemptionCategory *string `json:"exemptionCategory,omitempty" tf:"exemption_category,omitempty"`

	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	ExpiresOn *string `json:"expiresOn,omitempty" tf:"expires_on,omitempty"`

	// The Policy Exemption id.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
	PolicyAssignmentID *string `json:"policyAssignmentId,omitempty" tf:"policy_assignment_id,omitempty"`

	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds []*string `json:"policyDefinitionReferenceIds,omitempty" tf:"policy_definition_reference_ids,omitempty"`

	// The Resource Group ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`
}

type ResourceGroupPolicyExemptionParameters struct {

	// A description to use for this Policy Exemption.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A friendly display name to use for this Policy Exemption.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The category of this policy exemption. Possible values are Waiver and Mitigated.
	// +kubebuilder:validation:Optional
	ExemptionCategory *string `json:"exemptionCategory,omitempty" tf:"exemption_category,omitempty"`

	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	// +kubebuilder:validation:Optional
	ExpiresOn *string `json:"expiresOn,omitempty" tf:"expires_on,omitempty"`

	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cluster/authorization/v1beta2.ResourceGroupPolicyAssignment
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	PolicyAssignmentID *string `json:"policyAssignmentId,omitempty" tf:"policy_assignment_id,omitempty"`

	// Reference to a ResourceGroupPolicyAssignment in authorization to populate policyAssignmentId.
	// +kubebuilder:validation:Optional
	PolicyAssignmentIDRef *v1.Reference `json:"policyAssignmentIdRef,omitempty" tf:"-"`

	// Selector for a ResourceGroupPolicyAssignment in authorization to populate policyAssignmentId.
	// +kubebuilder:validation:Optional
	PolicyAssignmentIDSelector *v1.Selector `json:"policyAssignmentIdSelector,omitempty" tf:"-"`

	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	// +kubebuilder:validation:Optional
	PolicyDefinitionReferenceIds []*string `json:"policyDefinitionReferenceIds,omitempty" tf:"policy_definition_reference_ids,omitempty"`

	// The Resource Group ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cluster/azure/v1beta1.ResourceGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupId.
	// +kubebuilder:validation:Optional
	ResourceGroupIDRef *v1.Reference `json:"resourceGroupIdRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupId.
	// +kubebuilder:validation:Optional
	ResourceGroupIDSelector *v1.Selector `json:"resourceGroupIdSelector,omitempty" tf:"-"`
}

// ResourceGroupPolicyExemptionSpec defines the desired state of ResourceGroupPolicyExemption
type ResourceGroupPolicyExemptionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ResourceGroupPolicyExemptionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ResourceGroupPolicyExemptionInitParameters `json:"initProvider,omitempty"`
}

// ResourceGroupPolicyExemptionStatus defines the observed state of ResourceGroupPolicyExemption.
type ResourceGroupPolicyExemptionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ResourceGroupPolicyExemptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ResourceGroupPolicyExemption is the Schema for the ResourceGroupPolicyExemptions API. Manages a Resource Group Policy Exemption.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ResourceGroupPolicyExemption struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.exemptionCategory) || (has(self.initProvider) && has(self.initProvider.exemptionCategory))",message="spec.forProvider.exemptionCategory is a required parameter"
	Spec   ResourceGroupPolicyExemptionSpec   `json:"spec"`
	Status ResourceGroupPolicyExemptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResourceGroupPolicyExemptionList contains a list of ResourceGroupPolicyExemptions
type ResourceGroupPolicyExemptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ResourceGroupPolicyExemption `json:"items"`
}

// Repository type metadata.
var (
	ResourceGroupPolicyExemption_Kind             = "ResourceGroupPolicyExemption"
	ResourceGroupPolicyExemption_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ResourceGroupPolicyExemption_Kind}.String()
	ResourceGroupPolicyExemption_KindAPIVersion   = ResourceGroupPolicyExemption_Kind + "." + CRDGroupVersion.String()
	ResourceGroupPolicyExemption_GroupVersionKind = CRDGroupVersion.WithKind(ResourceGroupPolicyExemption_Kind)
)

func init() {
	SchemeBuilder.Register(&ResourceGroupPolicyExemption{}, &ResourceGroupPolicyExemptionList{})
}
