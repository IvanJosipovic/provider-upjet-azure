// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type ContainerImmutabilityPolicyInitParameters struct {

	// The time interval in days that the data needs to be kept in a non-erasable and non-modifiable state.
	ImmutabilityPeriodInDays *float64 `json:"immutabilityPeriodInDays,omitempty" tf:"immutability_period_in_days,omitempty"`

	// Whether to lock this immutability policy. Cannot be set to false once the policy has been locked.
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// Whether to allow protected append writes to block and append blobs to the container. Defaults to false. Cannot be set with protected_append_writes_enabled.
	ProtectedAppendWritesAllEnabled *bool `json:"protectedAppendWritesAllEnabled,omitempty" tf:"protected_append_writes_all_enabled,omitempty"`

	// Whether to allow protected append writes to append blobs to the container. Defaults to false. Cannot be set with protected_append_writes_all_enabled.
	ProtectedAppendWritesEnabled *bool `json:"protectedAppendWritesEnabled,omitempty" tf:"protected_append_writes_enabled,omitempty"`
}

type ContainerImmutabilityPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The time interval in days that the data needs to be kept in a non-erasable and non-modifiable state.
	ImmutabilityPeriodInDays *float64 `json:"immutabilityPeriodInDays,omitempty" tf:"immutability_period_in_days,omitempty"`

	// Whether to lock this immutability policy. Cannot be set to false once the policy has been locked.
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// Whether to allow protected append writes to block and append blobs to the container. Defaults to false. Cannot be set with protected_append_writes_enabled.
	ProtectedAppendWritesAllEnabled *bool `json:"protectedAppendWritesAllEnabled,omitempty" tf:"protected_append_writes_all_enabled,omitempty"`

	// Whether to allow protected append writes to append blobs to the container. Defaults to false. Cannot be set with protected_append_writes_all_enabled.
	ProtectedAppendWritesEnabled *bool `json:"protectedAppendWritesEnabled,omitempty" tf:"protected_append_writes_enabled,omitempty"`

	// The Resource Manager ID of the Storage Container where this Immutability Policy should be applied. Changing this forces a new resource to be created.
	StorageContainerResourceManagerID *string `json:"storageContainerResourceManagerId,omitempty" tf:"storage_container_resource_manager_id,omitempty"`
}

type ContainerImmutabilityPolicyParameters struct {

	// The time interval in days that the data needs to be kept in a non-erasable and non-modifiable state.
	// +kubebuilder:validation:Optional
	ImmutabilityPeriodInDays *float64 `json:"immutabilityPeriodInDays,omitempty" tf:"immutability_period_in_days,omitempty"`

	// Whether to lock this immutability policy. Cannot be set to false once the policy has been locked.
	// +kubebuilder:validation:Optional
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// Whether to allow protected append writes to block and append blobs to the container. Defaults to false. Cannot be set with protected_append_writes_enabled.
	// +kubebuilder:validation:Optional
	ProtectedAppendWritesAllEnabled *bool `json:"protectedAppendWritesAllEnabled,omitempty" tf:"protected_append_writes_all_enabled,omitempty"`

	// Whether to allow protected append writes to append blobs to the container. Defaults to false. Cannot be set with protected_append_writes_all_enabled.
	// +kubebuilder:validation:Optional
	ProtectedAppendWritesEnabled *bool `json:"protectedAppendWritesEnabled,omitempty" tf:"protected_append_writes_enabled,omitempty"`

	// The Resource Manager ID of the Storage Container where this Immutability Policy should be applied. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cluster/storage/v1beta1.Container
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("resource_manager_id",true)
	// +kubebuilder:validation:Optional
	StorageContainerResourceManagerID *string `json:"storageContainerResourceManagerId,omitempty" tf:"storage_container_resource_manager_id,omitempty"`

	// Reference to a Container in storage to populate storageContainerResourceManagerId.
	// +kubebuilder:validation:Optional
	StorageContainerResourceManagerIDRef *v1.Reference `json:"storageContainerResourceManagerIdRef,omitempty" tf:"-"`

	// Selector for a Container in storage to populate storageContainerResourceManagerId.
	// +kubebuilder:validation:Optional
	StorageContainerResourceManagerIDSelector *v1.Selector `json:"storageContainerResourceManagerIdSelector,omitempty" tf:"-"`
}

// ContainerImmutabilityPolicySpec defines the desired state of ContainerImmutabilityPolicy
type ContainerImmutabilityPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ContainerImmutabilityPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ContainerImmutabilityPolicyInitParameters `json:"initProvider,omitempty"`
}

// ContainerImmutabilityPolicyStatus defines the observed state of ContainerImmutabilityPolicy.
type ContainerImmutabilityPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ContainerImmutabilityPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ContainerImmutabilityPolicy is the Schema for the ContainerImmutabilityPolicys API. Manages an Immutability Policy for a Container within an Azure Storage Account.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ContainerImmutabilityPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.immutabilityPeriodInDays) || (has(self.initProvider) && has(self.initProvider.immutabilityPeriodInDays))",message="spec.forProvider.immutabilityPeriodInDays is a required parameter"
	Spec   ContainerImmutabilityPolicySpec   `json:"spec"`
	Status ContainerImmutabilityPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContainerImmutabilityPolicyList contains a list of ContainerImmutabilityPolicys
type ContainerImmutabilityPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ContainerImmutabilityPolicy `json:"items"`
}

// Repository type metadata.
var (
	ContainerImmutabilityPolicy_Kind             = "ContainerImmutabilityPolicy"
	ContainerImmutabilityPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ContainerImmutabilityPolicy_Kind}.String()
	ContainerImmutabilityPolicy_KindAPIVersion   = ContainerImmutabilityPolicy_Kind + "." + CRDGroupVersion.String()
	ContainerImmutabilityPolicy_GroupVersionKind = CRDGroupVersion.WithKind(ContainerImmutabilityPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ContainerImmutabilityPolicy{}, &ContainerImmutabilityPolicyList{})
}
