// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type ManagementGroupPolicyExemptionInitParameters struct {

	// A description to use for this Policy Exemption.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A friendly display name to use for this Policy Exemption.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The category of this policy exemption. Possible values are Waiver and Mitigated.
	ExemptionCategory *string `json:"exemptionCategory,omitempty" tf:"exemption_category,omitempty"`

	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	ExpiresOn *string `json:"expiresOn,omitempty" tf:"expires_on,omitempty"`

	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The ID of the Policy Assignment to be exempted at the specified Scope.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/authorization/v1beta1.ManagementGroupPolicyAssignment
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	PolicyAssignmentID *string `json:"policyAssignmentId,omitempty" tf:"policy_assignment_id,omitempty"`

	// Reference to a ManagementGroupPolicyAssignment in authorization to populate policyAssignmentId.
	// +kubebuilder:validation:Optional
	PolicyAssignmentIDRef *v1.NamespacedReference `json:"policyAssignmentIdRef,omitempty" tf:"-"`

	// Selector for a ManagementGroupPolicyAssignment in authorization to populate policyAssignmentId.
	// +kubebuilder:validation:Optional
	PolicyAssignmentIDSelector *v1.NamespacedSelector `json:"policyAssignmentIdSelector,omitempty" tf:"-"`

	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds []*string `json:"policyDefinitionReferenceIds,omitempty" tf:"policy_definition_reference_ids,omitempty"`
}

type ManagementGroupPolicyExemptionObservation struct {

	// A description to use for this Policy Exemption.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A friendly display name to use for this Policy Exemption.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The category of this policy exemption. Possible values are Waiver and Mitigated.
	ExemptionCategory *string `json:"exemptionCategory,omitempty" tf:"exemption_category,omitempty"`

	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	ExpiresOn *string `json:"expiresOn,omitempty" tf:"expires_on,omitempty"`

	// The Policy Exemption id.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The Management Group ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	ManagementGroupID *string `json:"managementGroupId,omitempty" tf:"management_group_id,omitempty"`

	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The ID of the Policy Assignment to be exempted at the specified Scope.
	PolicyAssignmentID *string `json:"policyAssignmentId,omitempty" tf:"policy_assignment_id,omitempty"`

	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds []*string `json:"policyDefinitionReferenceIds,omitempty" tf:"policy_definition_reference_ids,omitempty"`
}

type ManagementGroupPolicyExemptionParameters struct {

	// A description to use for this Policy Exemption.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A friendly display name to use for this Policy Exemption.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The category of this policy exemption. Possible values are Waiver and Mitigated.
	// +kubebuilder:validation:Optional
	ExemptionCategory *string `json:"exemptionCategory,omitempty" tf:"exemption_category,omitempty"`

	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	// +kubebuilder:validation:Optional
	ExpiresOn *string `json:"expiresOn,omitempty" tf:"expires_on,omitempty"`

	// The Management Group ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/management/v1beta1.ManagementGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ManagementGroupID *string `json:"managementGroupId,omitempty" tf:"management_group_id,omitempty"`

	// Reference to a ManagementGroup in management to populate managementGroupId.
	// +kubebuilder:validation:Optional
	ManagementGroupIDRef *v1.NamespacedReference `json:"managementGroupIdRef,omitempty" tf:"-"`

	// Selector for a ManagementGroup in management to populate managementGroupId.
	// +kubebuilder:validation:Optional
	ManagementGroupIDSelector *v1.NamespacedSelector `json:"managementGroupIdSelector,omitempty" tf:"-"`

	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The ID of the Policy Assignment to be exempted at the specified Scope.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/namespaced/authorization/v1beta1.ManagementGroupPolicyAssignment
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	PolicyAssignmentID *string `json:"policyAssignmentId,omitempty" tf:"policy_assignment_id,omitempty"`

	// Reference to a ManagementGroupPolicyAssignment in authorization to populate policyAssignmentId.
	// +kubebuilder:validation:Optional
	PolicyAssignmentIDRef *v1.NamespacedReference `json:"policyAssignmentIdRef,omitempty" tf:"-"`

	// Selector for a ManagementGroupPolicyAssignment in authorization to populate policyAssignmentId.
	// +kubebuilder:validation:Optional
	PolicyAssignmentIDSelector *v1.NamespacedSelector `json:"policyAssignmentIdSelector,omitempty" tf:"-"`

	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	// +kubebuilder:validation:Optional
	PolicyDefinitionReferenceIds []*string `json:"policyDefinitionReferenceIds,omitempty" tf:"policy_definition_reference_ids,omitempty"`
}

// ManagementGroupPolicyExemptionSpec defines the desired state of ManagementGroupPolicyExemption
type ManagementGroupPolicyExemptionSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            ManagementGroupPolicyExemptionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ManagementGroupPolicyExemptionInitParameters `json:"initProvider,omitempty"`
}

// ManagementGroupPolicyExemptionStatus defines the observed state of ManagementGroupPolicyExemption.
type ManagementGroupPolicyExemptionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagementGroupPolicyExemptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ManagementGroupPolicyExemption is the Schema for the ManagementGroupPolicyExemptions API. Manages a Management Group Policy Exemption.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azure}
type ManagementGroupPolicyExemption struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.exemptionCategory) || (has(self.initProvider) && has(self.initProvider.exemptionCategory))",message="spec.forProvider.exemptionCategory is a required parameter"
	Spec   ManagementGroupPolicyExemptionSpec   `json:"spec"`
	Status ManagementGroupPolicyExemptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementGroupPolicyExemptionList contains a list of ManagementGroupPolicyExemptions
type ManagementGroupPolicyExemptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagementGroupPolicyExemption `json:"items"`
}

// Repository type metadata.
var (
	ManagementGroupPolicyExemption_Kind             = "ManagementGroupPolicyExemption"
	ManagementGroupPolicyExemption_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagementGroupPolicyExemption_Kind}.String()
	ManagementGroupPolicyExemption_KindAPIVersion   = ManagementGroupPolicyExemption_Kind + "." + CRDGroupVersion.String()
	ManagementGroupPolicyExemption_GroupVersionKind = CRDGroupVersion.WithKind(ManagementGroupPolicyExemption_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagementGroupPolicyExemption{}, &ManagementGroupPolicyExemptionList{})
}
