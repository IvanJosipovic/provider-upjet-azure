// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import xpv1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"

// GetCondition of this IOTHub.
func (mg *IOTHub) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetManagementPolicies of this IOTHub.
func (mg *IOTHub) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this IOTHub.
func (mg *IOTHub) GetProviderConfigReference() *xpv1.ProviderConfigReference {
	return mg.Spec.ProviderConfigReference
}

// GetWriteConnectionSecretToReference of this IOTHub.
func (mg *IOTHub) GetWriteConnectionSecretToReference() *xpv1.LocalSecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this IOTHub.
func (mg *IOTHub) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetManagementPolicies of this IOTHub.
func (mg *IOTHub) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this IOTHub.
func (mg *IOTHub) SetProviderConfigReference(r *xpv1.ProviderConfigReference) {
	mg.Spec.ProviderConfigReference = r
}

// SetWriteConnectionSecretToReference of this IOTHub.
func (mg *IOTHub) SetWriteConnectionSecretToReference(r *xpv1.LocalSecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this IOTHubCertificate.
func (mg *IOTHubCertificate) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetManagementPolicies of this IOTHubCertificate.
func (mg *IOTHubCertificate) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this IOTHubCertificate.
func (mg *IOTHubCertificate) GetProviderConfigReference() *xpv1.ProviderConfigReference {
	return mg.Spec.ProviderConfigReference
}

// GetWriteConnectionSecretToReference of this IOTHubCertificate.
func (mg *IOTHubCertificate) GetWriteConnectionSecretToReference() *xpv1.LocalSecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this IOTHubCertificate.
func (mg *IOTHubCertificate) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetManagementPolicies of this IOTHubCertificate.
func (mg *IOTHubCertificate) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this IOTHubCertificate.
func (mg *IOTHubCertificate) SetProviderConfigReference(r *xpv1.ProviderConfigReference) {
	mg.Spec.ProviderConfigReference = r
}

// SetWriteConnectionSecretToReference of this IOTHubCertificate.
func (mg *IOTHubCertificate) SetWriteConnectionSecretToReference(r *xpv1.LocalSecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this IOTHubConsumerGroup.
func (mg *IOTHubConsumerGroup) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetManagementPolicies of this IOTHubConsumerGroup.
func (mg *IOTHubConsumerGroup) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this IOTHubConsumerGroup.
func (mg *IOTHubConsumerGroup) GetProviderConfigReference() *xpv1.ProviderConfigReference {
	return mg.Spec.ProviderConfigReference
}

// GetWriteConnectionSecretToReference of this IOTHubConsumerGroup.
func (mg *IOTHubConsumerGroup) GetWriteConnectionSecretToReference() *xpv1.LocalSecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this IOTHubConsumerGroup.
func (mg *IOTHubConsumerGroup) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetManagementPolicies of this IOTHubConsumerGroup.
func (mg *IOTHubConsumerGroup) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this IOTHubConsumerGroup.
func (mg *IOTHubConsumerGroup) SetProviderConfigReference(r *xpv1.ProviderConfigReference) {
	mg.Spec.ProviderConfigReference = r
}

// SetWriteConnectionSecretToReference of this IOTHubConsumerGroup.
func (mg *IOTHubConsumerGroup) SetWriteConnectionSecretToReference(r *xpv1.LocalSecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this IOTHubDPS.
func (mg *IOTHubDPS) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetManagementPolicies of this IOTHubDPS.
func (mg *IOTHubDPS) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this IOTHubDPS.
func (mg *IOTHubDPS) GetProviderConfigReference() *xpv1.ProviderConfigReference {
	return mg.Spec.ProviderConfigReference
}

// GetWriteConnectionSecretToReference of this IOTHubDPS.
func (mg *IOTHubDPS) GetWriteConnectionSecretToReference() *xpv1.LocalSecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this IOTHubDPS.
func (mg *IOTHubDPS) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetManagementPolicies of this IOTHubDPS.
func (mg *IOTHubDPS) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this IOTHubDPS.
func (mg *IOTHubDPS) SetProviderConfigReference(r *xpv1.ProviderConfigReference) {
	mg.Spec.ProviderConfigReference = r
}

// SetWriteConnectionSecretToReference of this IOTHubDPS.
func (mg *IOTHubDPS) SetWriteConnectionSecretToReference(r *xpv1.LocalSecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this IOTHubDPSCertificate.
func (mg *IOTHubDPSCertificate) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetManagementPolicies of this IOTHubDPSCertificate.
func (mg *IOTHubDPSCertificate) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this IOTHubDPSCertificate.
func (mg *IOTHubDPSCertificate) GetProviderConfigReference() *xpv1.ProviderConfigReference {
	return mg.Spec.ProviderConfigReference
}

// GetWriteConnectionSecretToReference of this IOTHubDPSCertificate.
func (mg *IOTHubDPSCertificate) GetWriteConnectionSecretToReference() *xpv1.LocalSecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this IOTHubDPSCertificate.
func (mg *IOTHubDPSCertificate) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetManagementPolicies of this IOTHubDPSCertificate.
func (mg *IOTHubDPSCertificate) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this IOTHubDPSCertificate.
func (mg *IOTHubDPSCertificate) SetProviderConfigReference(r *xpv1.ProviderConfigReference) {
	mg.Spec.ProviderConfigReference = r
}

// SetWriteConnectionSecretToReference of this IOTHubDPSCertificate.
func (mg *IOTHubDPSCertificate) SetWriteConnectionSecretToReference(r *xpv1.LocalSecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this IOTHubDPSSharedAccessPolicy.
func (mg *IOTHubDPSSharedAccessPolicy) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetManagementPolicies of this IOTHubDPSSharedAccessPolicy.
func (mg *IOTHubDPSSharedAccessPolicy) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this IOTHubDPSSharedAccessPolicy.
func (mg *IOTHubDPSSharedAccessPolicy) GetProviderConfigReference() *xpv1.ProviderConfigReference {
	return mg.Spec.ProviderConfigReference
}

// GetWriteConnectionSecretToReference of this IOTHubDPSSharedAccessPolicy.
func (mg *IOTHubDPSSharedAccessPolicy) GetWriteConnectionSecretToReference() *xpv1.LocalSecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this IOTHubDPSSharedAccessPolicy.
func (mg *IOTHubDPSSharedAccessPolicy) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetManagementPolicies of this IOTHubDPSSharedAccessPolicy.
func (mg *IOTHubDPSSharedAccessPolicy) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this IOTHubDPSSharedAccessPolicy.
func (mg *IOTHubDPSSharedAccessPolicy) SetProviderConfigReference(r *xpv1.ProviderConfigReference) {
	mg.Spec.ProviderConfigReference = r
}

// SetWriteConnectionSecretToReference of this IOTHubDPSSharedAccessPolicy.
func (mg *IOTHubDPSSharedAccessPolicy) SetWriteConnectionSecretToReference(r *xpv1.LocalSecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this IOTHubEndpointEventHub.
func (mg *IOTHubEndpointEventHub) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetManagementPolicies of this IOTHubEndpointEventHub.
func (mg *IOTHubEndpointEventHub) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this IOTHubEndpointEventHub.
func (mg *IOTHubEndpointEventHub) GetProviderConfigReference() *xpv1.ProviderConfigReference {
	return mg.Spec.ProviderConfigReference
}

// GetWriteConnectionSecretToReference of this IOTHubEndpointEventHub.
func (mg *IOTHubEndpointEventHub) GetWriteConnectionSecretToReference() *xpv1.LocalSecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this IOTHubEndpointEventHub.
func (mg *IOTHubEndpointEventHub) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetManagementPolicies of this IOTHubEndpointEventHub.
func (mg *IOTHubEndpointEventHub) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this IOTHubEndpointEventHub.
func (mg *IOTHubEndpointEventHub) SetProviderConfigReference(r *xpv1.ProviderConfigReference) {
	mg.Spec.ProviderConfigReference = r
}

// SetWriteConnectionSecretToReference of this IOTHubEndpointEventHub.
func (mg *IOTHubEndpointEventHub) SetWriteConnectionSecretToReference(r *xpv1.LocalSecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this IOTHubEndpointServiceBusQueue.
func (mg *IOTHubEndpointServiceBusQueue) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetManagementPolicies of this IOTHubEndpointServiceBusQueue.
func (mg *IOTHubEndpointServiceBusQueue) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this IOTHubEndpointServiceBusQueue.
func (mg *IOTHubEndpointServiceBusQueue) GetProviderConfigReference() *xpv1.ProviderConfigReference {
	return mg.Spec.ProviderConfigReference
}

// GetWriteConnectionSecretToReference of this IOTHubEndpointServiceBusQueue.
func (mg *IOTHubEndpointServiceBusQueue) GetWriteConnectionSecretToReference() *xpv1.LocalSecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this IOTHubEndpointServiceBusQueue.
func (mg *IOTHubEndpointServiceBusQueue) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetManagementPolicies of this IOTHubEndpointServiceBusQueue.
func (mg *IOTHubEndpointServiceBusQueue) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this IOTHubEndpointServiceBusQueue.
func (mg *IOTHubEndpointServiceBusQueue) SetProviderConfigReference(r *xpv1.ProviderConfigReference) {
	mg.Spec.ProviderConfigReference = r
}

// SetWriteConnectionSecretToReference of this IOTHubEndpointServiceBusQueue.
func (mg *IOTHubEndpointServiceBusQueue) SetWriteConnectionSecretToReference(r *xpv1.LocalSecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this IOTHubEndpointServiceBusTopic.
func (mg *IOTHubEndpointServiceBusTopic) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetManagementPolicies of this IOTHubEndpointServiceBusTopic.
func (mg *IOTHubEndpointServiceBusTopic) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this IOTHubEndpointServiceBusTopic.
func (mg *IOTHubEndpointServiceBusTopic) GetProviderConfigReference() *xpv1.ProviderConfigReference {
	return mg.Spec.ProviderConfigReference
}

// GetWriteConnectionSecretToReference of this IOTHubEndpointServiceBusTopic.
func (mg *IOTHubEndpointServiceBusTopic) GetWriteConnectionSecretToReference() *xpv1.LocalSecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this IOTHubEndpointServiceBusTopic.
func (mg *IOTHubEndpointServiceBusTopic) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetManagementPolicies of this IOTHubEndpointServiceBusTopic.
func (mg *IOTHubEndpointServiceBusTopic) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this IOTHubEndpointServiceBusTopic.
func (mg *IOTHubEndpointServiceBusTopic) SetProviderConfigReference(r *xpv1.ProviderConfigReference) {
	mg.Spec.ProviderConfigReference = r
}

// SetWriteConnectionSecretToReference of this IOTHubEndpointServiceBusTopic.
func (mg *IOTHubEndpointServiceBusTopic) SetWriteConnectionSecretToReference(r *xpv1.LocalSecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this IOTHubEndpointStorageContainer.
func (mg *IOTHubEndpointStorageContainer) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetManagementPolicies of this IOTHubEndpointStorageContainer.
func (mg *IOTHubEndpointStorageContainer) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this IOTHubEndpointStorageContainer.
func (mg *IOTHubEndpointStorageContainer) GetProviderConfigReference() *xpv1.ProviderConfigReference {
	return mg.Spec.ProviderConfigReference
}

// GetWriteConnectionSecretToReference of this IOTHubEndpointStorageContainer.
func (mg *IOTHubEndpointStorageContainer) GetWriteConnectionSecretToReference() *xpv1.LocalSecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this IOTHubEndpointStorageContainer.
func (mg *IOTHubEndpointStorageContainer) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetManagementPolicies of this IOTHubEndpointStorageContainer.
func (mg *IOTHubEndpointStorageContainer) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this IOTHubEndpointStorageContainer.
func (mg *IOTHubEndpointStorageContainer) SetProviderConfigReference(r *xpv1.ProviderConfigReference) {
	mg.Spec.ProviderConfigReference = r
}

// SetWriteConnectionSecretToReference of this IOTHubEndpointStorageContainer.
func (mg *IOTHubEndpointStorageContainer) SetWriteConnectionSecretToReference(r *xpv1.LocalSecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this IOTHubEnrichment.
func (mg *IOTHubEnrichment) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetManagementPolicies of this IOTHubEnrichment.
func (mg *IOTHubEnrichment) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this IOTHubEnrichment.
func (mg *IOTHubEnrichment) GetProviderConfigReference() *xpv1.ProviderConfigReference {
	return mg.Spec.ProviderConfigReference
}

// GetWriteConnectionSecretToReference of this IOTHubEnrichment.
func (mg *IOTHubEnrichment) GetWriteConnectionSecretToReference() *xpv1.LocalSecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this IOTHubEnrichment.
func (mg *IOTHubEnrichment) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetManagementPolicies of this IOTHubEnrichment.
func (mg *IOTHubEnrichment) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this IOTHubEnrichment.
func (mg *IOTHubEnrichment) SetProviderConfigReference(r *xpv1.ProviderConfigReference) {
	mg.Spec.ProviderConfigReference = r
}

// SetWriteConnectionSecretToReference of this IOTHubEnrichment.
func (mg *IOTHubEnrichment) SetWriteConnectionSecretToReference(r *xpv1.LocalSecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this IOTHubFallbackRoute.
func (mg *IOTHubFallbackRoute) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetManagementPolicies of this IOTHubFallbackRoute.
func (mg *IOTHubFallbackRoute) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this IOTHubFallbackRoute.
func (mg *IOTHubFallbackRoute) GetProviderConfigReference() *xpv1.ProviderConfigReference {
	return mg.Spec.ProviderConfigReference
}

// GetWriteConnectionSecretToReference of this IOTHubFallbackRoute.
func (mg *IOTHubFallbackRoute) GetWriteConnectionSecretToReference() *xpv1.LocalSecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this IOTHubFallbackRoute.
func (mg *IOTHubFallbackRoute) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetManagementPolicies of this IOTHubFallbackRoute.
func (mg *IOTHubFallbackRoute) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this IOTHubFallbackRoute.
func (mg *IOTHubFallbackRoute) SetProviderConfigReference(r *xpv1.ProviderConfigReference) {
	mg.Spec.ProviderConfigReference = r
}

// SetWriteConnectionSecretToReference of this IOTHubFallbackRoute.
func (mg *IOTHubFallbackRoute) SetWriteConnectionSecretToReference(r *xpv1.LocalSecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this IOTHubRoute.
func (mg *IOTHubRoute) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetManagementPolicies of this IOTHubRoute.
func (mg *IOTHubRoute) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this IOTHubRoute.
func (mg *IOTHubRoute) GetProviderConfigReference() *xpv1.ProviderConfigReference {
	return mg.Spec.ProviderConfigReference
}

// GetWriteConnectionSecretToReference of this IOTHubRoute.
func (mg *IOTHubRoute) GetWriteConnectionSecretToReference() *xpv1.LocalSecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this IOTHubRoute.
func (mg *IOTHubRoute) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetManagementPolicies of this IOTHubRoute.
func (mg *IOTHubRoute) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this IOTHubRoute.
func (mg *IOTHubRoute) SetProviderConfigReference(r *xpv1.ProviderConfigReference) {
	mg.Spec.ProviderConfigReference = r
}

// SetWriteConnectionSecretToReference of this IOTHubRoute.
func (mg *IOTHubRoute) SetWriteConnectionSecretToReference(r *xpv1.LocalSecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this IOTHubSharedAccessPolicy.
func (mg *IOTHubSharedAccessPolicy) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetManagementPolicies of this IOTHubSharedAccessPolicy.
func (mg *IOTHubSharedAccessPolicy) GetManagementPolicies() xpv1.ManagementPolicies {
	return mg.Spec.ManagementPolicies
}

// GetProviderConfigReference of this IOTHubSharedAccessPolicy.
func (mg *IOTHubSharedAccessPolicy) GetProviderConfigReference() *xpv1.ProviderConfigReference {
	return mg.Spec.ProviderConfigReference
}

// GetWriteConnectionSecretToReference of this IOTHubSharedAccessPolicy.
func (mg *IOTHubSharedAccessPolicy) GetWriteConnectionSecretToReference() *xpv1.LocalSecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this IOTHubSharedAccessPolicy.
func (mg *IOTHubSharedAccessPolicy) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetManagementPolicies of this IOTHubSharedAccessPolicy.
func (mg *IOTHubSharedAccessPolicy) SetManagementPolicies(r xpv1.ManagementPolicies) {
	mg.Spec.ManagementPolicies = r
}

// SetProviderConfigReference of this IOTHubSharedAccessPolicy.
func (mg *IOTHubSharedAccessPolicy) SetProviderConfigReference(r *xpv1.ProviderConfigReference) {
	mg.Spec.ProviderConfigReference = r
}

// SetWriteConnectionSecretToReference of this IOTHubSharedAccessPolicy.
func (mg *IOTHubSharedAccessPolicy) SetWriteConnectionSecretToReference(r *xpv1.LocalSecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
