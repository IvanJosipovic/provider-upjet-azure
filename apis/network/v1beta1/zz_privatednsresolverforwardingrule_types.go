// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PrivateDNSResolverForwardingRuleInitParameters struct {

	// Specifies the domain name for the Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// Specifies the state of the Private DNS Resolver Forwarding Rule. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Metadata attached to the Private DNS Resolver Forwarding Rule.
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Can be specified multiple times to define multiple target DNS servers. Each target_dns_servers block as defined below.
	TargetDNSServers []TargetDNSServersInitParameters `json:"targetDnsServers,omitempty" tf:"target_dns_servers,omitempty"`
}

type PrivateDNSResolverForwardingRuleObservation struct {

	// Specifies the ID of the Private DNS Resolver Forwarding Ruleset. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
	DNSForwardingRulesetID *string `json:"dnsForwardingRulesetId,omitempty" tf:"dns_forwarding_ruleset_id,omitempty"`

	// Specifies the domain name for the Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// Specifies the state of the Private DNS Resolver Forwarding Rule. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The ID of the Private DNS Resolver Forwarding Rule.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Metadata attached to the Private DNS Resolver Forwarding Rule.
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Can be specified multiple times to define multiple target DNS servers. Each target_dns_servers block as defined below.
	TargetDNSServers []TargetDNSServersObservation `json:"targetDnsServers,omitempty" tf:"target_dns_servers,omitempty"`
}

type PrivateDNSResolverForwardingRuleParameters struct {

	// Specifies the ID of the Private DNS Resolver Forwarding Ruleset. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.PrivateDNSResolverDNSForwardingRuleset
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	DNSForwardingRulesetID *string `json:"dnsForwardingRulesetId,omitempty" tf:"dns_forwarding_ruleset_id,omitempty"`

	// Reference to a PrivateDNSResolverDNSForwardingRuleset in network to populate dnsForwardingRulesetId.
	// +kubebuilder:validation:Optional
	DNSForwardingRulesetIDRef *v1.Reference `json:"dnsForwardingRulesetIdRef,omitempty" tf:"-"`

	// Selector for a PrivateDNSResolverDNSForwardingRuleset in network to populate dnsForwardingRulesetId.
	// +kubebuilder:validation:Optional
	DNSForwardingRulesetIDSelector *v1.Selector `json:"dnsForwardingRulesetIdSelector,omitempty" tf:"-"`

	// Specifies the domain name for the Private DNS Resolver Forwarding Rule. Changing this forces a new Private DNS Resolver Forwarding Rule to be created.
	// +kubebuilder:validation:Optional
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// Specifies the state of the Private DNS Resolver Forwarding Rule. Defaults to true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Metadata attached to the Private DNS Resolver Forwarding Rule.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Can be specified multiple times to define multiple target DNS servers. Each target_dns_servers block as defined below.
	// +kubebuilder:validation:Optional
	TargetDNSServers []TargetDNSServersParameters `json:"targetDnsServers,omitempty" tf:"target_dns_servers,omitempty"`
}

type TargetDNSServersInitParameters struct {

	// DNS server IP address.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// DNS server port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type TargetDNSServersObservation struct {

	// DNS server IP address.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// DNS server port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type TargetDNSServersParameters struct {

	// DNS server IP address.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress" tf:"ip_address,omitempty"`

	// DNS server port.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

// PrivateDNSResolverForwardingRuleSpec defines the desired state of PrivateDNSResolverForwardingRule
type PrivateDNSResolverForwardingRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PrivateDNSResolverForwardingRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PrivateDNSResolverForwardingRuleInitParameters `json:"initProvider,omitempty"`
}

// PrivateDNSResolverForwardingRuleStatus defines the observed state of PrivateDNSResolverForwardingRule.
type PrivateDNSResolverForwardingRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PrivateDNSResolverForwardingRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PrivateDNSResolverForwardingRule is the Schema for the PrivateDNSResolverForwardingRules API. Manages a Private DNS Resolver Forwarding Rule.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type PrivateDNSResolverForwardingRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domainName) || (has(self.initProvider) && has(self.initProvider.domainName))",message="spec.forProvider.domainName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.targetDnsServers) || (has(self.initProvider) && has(self.initProvider.targetDnsServers))",message="spec.forProvider.targetDnsServers is a required parameter"
	Spec   PrivateDNSResolverForwardingRuleSpec   `json:"spec"`
	Status PrivateDNSResolverForwardingRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrivateDNSResolverForwardingRuleList contains a list of PrivateDNSResolverForwardingRules
type PrivateDNSResolverForwardingRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrivateDNSResolverForwardingRule `json:"items"`
}

// Repository type metadata.
var (
	PrivateDNSResolverForwardingRule_Kind             = "PrivateDNSResolverForwardingRule"
	PrivateDNSResolverForwardingRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PrivateDNSResolverForwardingRule_Kind}.String()
	PrivateDNSResolverForwardingRule_KindAPIVersion   = PrivateDNSResolverForwardingRule_Kind + "." + CRDGroupVersion.String()
	PrivateDNSResolverForwardingRule_GroupVersionKind = CRDGroupVersion.WithKind(PrivateDNSResolverForwardingRule_Kind)
)

func init() {
	SchemeBuilder.Register(&PrivateDNSResolverForwardingRule{}, &PrivateDNSResolverForwardingRuleList{})
}
